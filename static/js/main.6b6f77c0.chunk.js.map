{"version":3,"sources":["Container/styled.js","Container/index.js","Container/Clock/styled.js","Container/Clock/index.js","Container/Clock/useCurrentDate.js","Container/Form/Result/index.js","Container/Form/styled.js","Container/Form/index.js","App.js","useRatesData.js","reportWebVitals.js","background_money.jpg","globalStyle.js","index.js","theme.js"],"names":["Wrapper","styled","div","theme","colors","lightGray","Container","children","p","mediumGray","Clock","date","currentDate","useState","Date","setCurrentDate","useEffect","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleDateString","undefined","month","weekday","day","hour","minute","second","Result","result","amount","toFixed","fromCurrency","resultAmount","toCurrency","StyledForm","form","Fieldset","fieldset","silver","Legend","legend","primary","LabelText","span","Button","button","white","Info","error","css","red","Field","input","special","Form","calculateResult","ratesData","setFromCurrency","setToCurrency","setAmount","onSubmit","event","preventDefault","status","as","value","onChange","target","Object","keys","rates","map","short","type","min","step","required","App","setResult","setRatesData","setTimeout","axios","get","then","response","base","data","catch","useRatesData","rateFromCurrency","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","background","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b6f77c0.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    flex-basis: 600px;\r\n    margin: 20px;\r\n    padding: 20px;\r\n    background-color: ${({ theme }) => theme.colors.lightGray};\r\n    border-radius: 10px;\r\n`;","import { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.p`\r\n    font-family: 'Inconsolata', monospace;\r\n    font-size: small;\r\n    text-align: right;\r\n    color: ${({ theme }) => theme.colors.mediumGray};\r\n`;","import { Wrapper } from './styled';\r\nimport { useCurrentDate } from './useCurrentDate';\r\n\r\nconst formatDate = (date) => {\r\n    return date.toLocaleDateString(\r\n        undefined,\r\n        {\r\n            month: \"long\",\r\n            weekday: \"long\",\r\n            day: \"numeric\",\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n            second: \"numeric\"\r\n        }\r\n    );\r\n};\r\n\r\nconst Clock = () => {\r\n    const currentDate = useCurrentDate();\r\n\r\n    return (\r\n        <Wrapper>\r\n            Dzisiaj jest {formatDate(currentDate)}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Clock;","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setCurrentDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n    }, []);\r\n\r\n    return currentDate;\r\n};","const Result = ({ result }) => (\r\n    <p>\r\n        {!!result && (\r\n            <>\r\n                {result.amount.toFixed(2)}&nbsp;{result.fromCurrency}&nbsp;=\r\n                {\" \"}\r\n                <strong>\r\n                    {result.resultAmount.toFixed(2)}&nbsp;{result.toCurrency}\r\n                </strong>\r\n            </>\r\n        )}\r\n    </p>\r\n);\r\n\r\nexport default Result;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    text-align: center;\r\n`;\r\n\r\nexport const Fieldset = styled.fieldset`\r\n    border: 1px solid ${({ theme }) => theme.colors.silver};\r\n    border-radius: 10px;\r\n`;\r\n\r\nexport const Legend = styled.legend`\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    padding: 10px;\r\n`;\r\n\r\nexport const LabelText = styled.span`\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: inline-block;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n    color: ${({ theme }) => theme.colors.white};\r\n    border-radius: 30px;\r\n    border: none;\r\n    width: 100%;\r\n    transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const Info = styled.p`\r\n    text-align: center;\r\n    line-height: 2;\r\n    color: ${({ theme }) => theme.colors.mediumGray};\r\n\r\n    ${({ error }) => error && css`\r\n        color: ${({ theme }) => theme.colors.red}; \r\n    `}\r\n`;\r\n\r\nexport const Field = styled.input`\r\n    border: 1px solid ${({ theme }) => theme.colors.silver};\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    width: 100%;\r\n    max-width: 200px;\r\n\r\n    ${({ special }) => special && css`\r\n        font-family: 'Montserrat', sans-serif;\r\n        background-color: ${({ theme }) => theme.colors.primary};\r\n        color: ${({ theme }) => theme.colors.white};\r\n        border: none;\r\n        transition: filter 0.5s;\r\n\r\n        &:hover {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n`;","import { useState } from 'react';\r\nimport Result from './Result';\r\nimport {\r\n    Fieldset,\r\n    LabelText,\r\n    StyledForm,\r\n    Button,\r\n    Info,\r\n    Legend,\r\n    Field\r\n} from './styled';\r\n\r\nconst Form = ({ calculateResult, result, ratesData }) => {\r\n    const [fromCurrency, setFromCurrency] = useState(\"PLN\");\r\n    const [toCurrency, setToCurrency] = useState(\"EUR\");\r\n    const [amount, setAmount] = useState(1);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        calculateResult(fromCurrency, toCurrency, amount);\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            {ratesData.status === \"loading\" ? (\r\n                <Info>\r\n                    Ładowanie kursów walut z Europejskiego Banku Centralnego...\r\n                </Info>\r\n            ) :\r\n                (ratesData.status === \"error\" ? (\r\n                    <Info error>\r\n                        Ups! Wystąpił błąd. <br />\r\n                        Sprawdź połączenie z internetem. <br />\r\n                        Jeśli je masz to spróbuj ponownie później.\r\n                    </Info>\r\n                ) :\r\n                    (\r\n                        <>\r\n                            <Fieldset>\r\n                                <Legend>Kalkulator walut</Legend>\r\n                                <p>\r\n                                    <label>\r\n                                        <LabelText>\r\n                                            Przelicz z:\r\n                                        </LabelText>\r\n                                        <Field\r\n                                            as=\"select\"\r\n                                            special\r\n                                            value={fromCurrency}\r\n                                            onChange={({ target }) => setFromCurrency(target.value)}\r\n                                        >\r\n                                            {Object.keys(ratesData.rates).map(short => (\r\n                                                <option key={short} value={short}>\r\n                                                    {short}\r\n                                                </option>\r\n                                            ))}\r\n                                        </Field>\r\n                                    </label>\r\n                                </p>\r\n                                <p>\r\n                                    <label>\r\n                                        <LabelText>\r\n                                            Przelicz na:\r\n                                        </LabelText>\r\n                                        <Field\r\n                                            as=\"select\"\r\n                                            special\r\n                                            value={toCurrency}\r\n                                            onChange={({ target }) => setToCurrency(target.value)}\r\n                                        >\r\n                                            {Object.keys(ratesData.rates).map(short => (\r\n                                                <option key={short} value={short}>\r\n                                                    {short}\r\n                                                </option>\r\n                                            ))}\r\n                                        </Field>\r\n                                    </label>\r\n                                </p>\r\n                                <p>\r\n                                    <label>\r\n                                        <LabelText>\r\n                                            Kwota:\r\n                                        </LabelText>\r\n                                        <Field\r\n                                            value={amount}\r\n                                            onChange={({ target }) => setAmount(target.value)}\r\n                                            type=\"number\"\r\n                                            min=\"0\"\r\n                                            step=\"0.01\"\r\n                                            required\r\n                                        />\r\n                                    </label>\r\n                                </p>\r\n                            </Fieldset>\r\n                            <p>\r\n                                <Button>\r\n                                    Oblicz\r\n                                </Button>\r\n                            </p>\r\n                            <Result\r\n                                result={result}\r\n                            />\r\n                            <Info>\r\n                                Kursy walut pochodzą z Europejskiego Banku Centralnego\r\n                                <br />\r\n                                Kursy aktualne na dzień {ratesData.date}\r\n                            </Info>\r\n                        </>\r\n                    ))}\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, { useState } from 'react';\r\nimport Container from './Container';\r\nimport Clock from './Container/Clock';\r\nimport Form from './Container/Form';\r\nimport { useRatesData } from './useRatesData';\r\n\r\nfunction App() {\r\n  const [result, setResult] = useState();\r\n\r\n  const ratesData = useRatesData();\r\n\r\n  const calculateResult = (fromCurrency, toCurrency, amount) => {\r\n    let resultAmount = 0;\r\n\r\n    if (fromCurrency === ratesData.base) {\r\n      const rate = ratesData.rates[toCurrency];\r\n      resultAmount = rate * amount;\r\n\r\n    } else {\r\n      const rateFromCurrency = ratesData.rates[fromCurrency];\r\n      const rateToCurrency = ratesData.rates[toCurrency];\r\n      resultAmount = (rateToCurrency / rateFromCurrency ) * amount;\r\n    }\r\n\r\n    setResult({ fromCurrency, toCurrency, amount: +amount, resultAmount });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Clock />\r\n      <Form\r\n        calculateResult={calculateResult}\r\n        result={result}\r\n        ratesData={ratesData}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const useRatesData = () => {\r\n    const [ratesData, setRatesData] = useState({ status: \"loading\" });\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            const apiURL = \"https://api.exchangerate.host/latest?base=PLN?source=ecb\";\r\n            axios.get(apiURL)\r\n                .then(response => {\r\n                    setRatesData({\r\n                        status: \"success\",\r\n                        base: response.data.base,\r\n                        date: response.data.date,\r\n                        rates: response.data.rates,\r\n                    });\r\n                })\r\n                .catch(() => {\r\n                    setRatesData({\r\n                        status: \"error\",\r\n                    });\r\n                });\r\n        }, 1000);\r\n    }, []);\r\n\r\n    return ratesData;\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/background_money.50c3b024.jpg\";","import { createGlobalStyle } from \"styled-components\";\r\nimport background from \"./background_money.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html{\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::before, ::after{\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    #root {\r\n        font-family: 'Montserrat', sans-serif;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        min-height: 100vh;\r\n        background-image: url(${background});\r\n        background-size: cover;\r\n        background-position: center;\r\n    }\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from './theme';\nimport { GlobalStyle } from './globalStyle';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primary: \"#272343\",\r\n        white: \"#fff\",\r\n        silver: \"#bbb\",\r\n        lightGray: \"#f7f7f7\",\r\n        mediumGray: \"#707070\",\r\n        red: \"#ff0000\",\r\n    },\r\n};"],"sourceRoot":""}